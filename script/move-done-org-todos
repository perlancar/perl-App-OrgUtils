#!/usr/bin/env perl

# AUTHORITY
# DATE
# DIST
# VERSION

use 5.010001;
use strict;
use warnings;
use Log::ger;

use Scalar::Util qw(refaddr);
use Perinci::CmdLine::Any;

our %SPEC;

sub _move_item {
    my ($item, $done_doc, $args, $ref_num_moved) = @_;

    my @parents;
    my $parent = $item;
    while ($parent = $parent->parent) {
        unshift @parents, $parent;
    }
    shift @parents; # skip root document

  FILTER:
    {
        last unless defined($args->{include_pat}) ||
            defined($args->{exclude_pat});
        my $include = 0;
        for my $parent (@parents) {
            my $title = $parent->title->as_string;
            if (defined($args->{include_pat}) &&
                    $title =~ /$args->{include_pat}/) {
                $include = 1;
            }
            if (defined($args->{exclude_pat}) &&
                    $title =~ /$args->{exclude_pat}/) {
                log_info "Todo item '%s' is under headline '%s' (matches exclude_pat %s), skipped",
                    $item->title->as_string,
                    $title,
                    $args->{exclude_pat};
                return;
            }
        }

        unless ($include) {
            log_info "Todo item '%s' is not under any headlines which match include_pat %s",
                $item->title->as_string,
                $args->{include_pat};
            return;
        }
    }

    # recreate the structure in $done_doc
    my $done_parent = $done_doc;
    for my $parent (@parents) {
        my $title = $parent->title->as_string;
        $title =~ s/\s+\z//;
        my $found;
        for my $el (@{ $done_parent->children }) {
            next unless $el->isa("Org::Element::Headline");
            my $el_title = $el->title->as_string;
            $el_title =~ s/\s+\z//;
            if ($el->isa("Org::Element::Headline") &&
                    $el_title eq $title) {
                $found = $el;
                last;
            }
        }
        if ($found) {
            $done_parent = $found;
        } else {
            my $new_p = Org::Element::Headline->new(
                document => $done_doc,
                parent => $done_parent,
                level => $parent->level,
                children => [],
            );
            $new_p->title(Org::Element::Text->new(
                document => $done_doc,
                parent => $new_p,
                text => $title,
                children => [],
            ));
            log_trace("Creating new headline in done doc: %s", $title);
            push @{ $done_parent->children }, $new_p;
            $done_parent = $new_p;
        }
    }
    $done_parent->{children} //= [];
    push @{ $done_parent->children }, $item;

    # remove from undone
    my $i = -1;
    for my $el (@{ $item->parent->children }) {
        $i++;
        if (refaddr($el) eq refaddr($item)) {
            log_info "Moving todo item '%s' from undone to done doc", $item->title->as_string;
            splice(@{ $item->parent->children }, $i, 1);
            ${ $ref_num_moved }++;
            last;
        }
    }
}

$SPEC{move_done_org_todos} = {
    v => 1.1,
    summary => 'Move done todos from one Org file to another',
    description => <<'_',

**WARNING: PLEASE BACKUP OR COMMIT YOUR UNSAVED WORK TO YOUR TODO FILE BEFORE USING THIS UTILITY. THIS UTILITY MODIFIES YOUR TODO FILE.**.

This utility can move done todos from one file to another. One typical use-case
is to archive done todo items from your todo file. The structure in the original
file will be maintained. For example, suppose you have this file:

    * category 1 [0/0]
    ** TODO one
    ** DONE two
    ** DONE three
    * category 2 [0/0]
    ** TODO four
    * category 3 [0/0]
    ** DONE five

then when the done todos are moved, the target file will be something like this
(existing items in the target file are maintained):

    * category 1 [2/2]
    ** DONE two
    ** DONE three
    * category 3 [0/0]
    ** DONE five

and the original file will become:

    * category 1 [0/0]
    ** TODO one
    * category 2 [0/0]
    ** TODO four
    * category 3 [0/0]

_
    args => {
        undone_file => {
            schema => 'str*', # XXX filename
            req => 1,
            pos => 0,
        },
        done_file => {
            summary => 'Will print to stdout if unspecified',
            schema => 'str*', # XXX filename
            pos => 1,
        },
        include_pat => {
            summary => 'Only include todo items under this headline pattern',
            schema => 're*',
        },
        exclude_pat => {
            summary => 'Exclude todo items under this headline pattern',
            schema => 're*',
        },
    },
    features => {
        dry_run => {default=>1},
    },
    examples => [
        {
            summary => 'Strip done items from todo.org into done.org (simulation mode, the default mode)',
            src => '[[prog]] todo.org done.org',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org into done.org',
            src => '[[prog]] todo.org done.org --no-dry-run',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org and put it into a new file done1.org',
            src => '[[prog]] todo.org --no-dry-run >done1.org',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Strip done items from todo.org and print it to stdout (NOTE: you might want to save the stdout output because they are stripped from todo.org)',
            src => '[[prog]] todo.org --no-dry-run',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
    ],
};
sub move_done_org_todos {
    require Org::Document;
    require Org::Parser;
    require Path::Tiny;

    my %args = @_;

    my $orgp = Org::Parser->new;

    my $undone_doc = $orgp->parse_file($args{undone_file});
    my $done_doc   = defined $args{done_file} && (-f $args{done_file}) ?
        $orgp->parse_file($args{done_file}) :
        Org::Document->new(from_string => '');

    my $num_moved = 0;
    $undone_doc->walk(
        sub {
            my $el = shift;
            return unless $el->isa("Org::Element::Headline") &&
                $el->is_todo && $el->is_done;
            log_info("Found done todo: %s", $el->title->as_string);
            _move_item($el, $done_doc,  \%args, \$num_moved);
        });

    log_info "Number of items moved: %d", $num_moved;

    if ($args{-dry_run}) {
        log_info "[DRY] Saving %s", $args{undone_file};
    } else {
        Path::Tiny->new($args{undone_file})->spew_utf8($undone_doc->as_string);
    }

    if (defined $args{done_file}) {
        if ($args{-dry_run}) {
            log_info "[DRY] Saving %s", $args{done_file};
            return [304, "OK"];
        } else {
            Path::Tiny->new($args{done_file})->spew_utf8($done_doc->as_string);
            return [200, "OK"];
        }
    } else {
        return [200, "OK", $done_doc->as_string, {"cmdline.skip_format"=>1}];
    }
}

Perinci::CmdLine::Any->new(
    url => '/main/move_done_org_todos',
    log => 1,
)->run;

# ABSTRACT:
# PODNAME:
