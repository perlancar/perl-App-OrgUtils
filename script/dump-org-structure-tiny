#!perl

use 5.010001;
use strict;
use warnings;
use open qw(:std :utf8);
use Log::ger;

use Org::Parser::Tiny;
use Org::Dump;

# AUTHORITY
# DATE
# DIST
# VERSION

my $input = [<>];
close STDIN; close ARGV; # so perl doesn't add ", <> line xx" upon dying

my $doc = Org::Parser::Tiny->new->parse($input);
print Org::Dump::dump_element($doc);

1;
# ABSTRACT: Dump Org document structure (using Org::Parser::Tiny)
# PODNAME:

=head1 SYNOPSIS

 $ dump-org-structure-tiny   foo.org
 $ dump-org-structure-tiny < bar.org

Given an Org document like this:

 text before first headline

 * headline1
 ** headline1.1
 * headline2

will output something like:

 (Org::Parser::Tiny::Node::Document) {preamble=>"text before first headline\n\n"}
 |-- (Org::Parser::Tiny::Node::Headline) {is_done=>0,is_todo=>0,level=>1,preamble=>"",raw=>"* headline1\n",title=>"headline1",todo_state=>""}
 |   \-- (Org::Parser::Tiny::Node::Headline) {is_done=>0,is_todo=>0,level=>2,preamble=>"",raw=>"** headline1.1\n",title=>"headline1.1",todo_state=>""}
 \-- (Org::Parser::Tiny::Node::Headline) {is_done=>0,is_todo=>0,level=>1,preamble=>"",raw=>"* headline2\n",title=>"headline2",todo_state=>""}


=head1 DESCRIPTION

This script parses input using L<Org::Parser::Tiny> and dump the structure using
L<Org::Dump>. This script is mostly used for debugging.


=head1 SEE ALSO

L<dump-org-structure>

=cut
