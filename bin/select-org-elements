#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;
use open qw(:std :utf8);
use Log::Any::IfLOG qw($log);

use Code::Includable::Tree::NodeMethods;
use Data::CSel qw(parse_csel csel);
use Getopt::Long::EvenLess;
use Org::Parser;
use Time::HiRes qw(time);

my %Opts = (
    print => 'text',
);

GetOptions(
    'help|h|?' => sub {
        print <<'_';
Usage:
  select-org-elements [options] <expression> <input>
  select-org-elements --help (-h, -?)
  select-org-elements --version (-v)

Options:
  --print=s, -p
  --count, -c
_
        exit 0;
    },
    'version|v' => sub {
        say "select-org-elements version ", ($main::VERSION // 'dev');
        exit 0;
    },
    'print|p=s' => sub {
        $Opts{print} = $_[1];
    },
    'count|c' => sub {
        $Opts{count} = 1;
    },
) or die "Error in GetOptions\n";

my $expr = shift or die "Please specify CSel expression\n";

# parse first so we can exit early without having to read the input
parse_csel($expr) or die "Invalid CSel expression '$expr'\n";

my $input = [<>];
close STDIN; close ARGV; # so perl doesn't add ", <> line xx" upon dying

my $doc = Org::Parser->new->parse($input);

my $time0 = time();
my @res = csel(
    {
        class_prefixes => ['Org::Element'],
    },
    $expr,
    Code::Includable::Tree::NodeMethods::descendants($doc));
my $time1 = time();
$log->tracef("Select time: %.3fs", $time1-$time0);

if ($Opts{count}) {
    print ~~@res, "\n";
} elsif ($Opts{print} eq 'text-and-children-text') {
    for (@res) {
        my $str = $_->as_string . $_->children_as_string;
        print $str;
        print "\n" unless $str =~ /\R\z/;
    }
} elsif ($Opts{print} eq 'dump') {
    require Org::Dump;
    for (@res) {
        print Org::Dump::dump_element($_);
    }
} else {
    for (@res) {
        my $str = $_->as_string;
        print $str;
        print "\n" unless $str =~ /\R\z/;
    }
}

1;
# ABSTRACT: Select Org document elements using CSel
# PODNAME:

=head1 SYNOPSIS

 % select-org-elements [options] 'Headline[level=2]' foo.org


=head1 DESCRIPTION

This script selects Org document nodes using CSel, much like how CSS selector
selects elements from HTML document. It then invokes


=head1 OPTIONS

=over

=item * --print=s, -p

Specify how to print each matching element. The default is C<text>, which is to
print the result of each element's C<as_string()> method. Other valid values
include: C<text-and-children-text> (print the result of each element's
C<as_string()> as well as C<children_as_string()>), C<dump> (dump each element
using L<Org::Dump>).

See also: C<--count>.

=item * --count, -c

Instead of printing each element, return the number of matching elements.

=back

=head1 SEE ALSO

L<Org::Parser>

L<Data::CSel>

=cut
